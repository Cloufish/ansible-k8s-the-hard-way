---
- name: Fetch controller binaries from jumpbox
  fetch: 
    src: /home/{{ ansible_user }}/downloads/controller/{{ item }}
    dest: /tmp/{{ item }}
    flat: true
  loop: 
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
  when: inventory_hostname == groups['k8s_hard_jumpbox'][0]

- name: Fetch client binaries from jumpbox
  fetch: 
    src: /home/{{ ansible_user }}/downloads/client/{{ item }}
    dest: /tmp/{{ item }}
    flat: true
  loop: 
    - "kubectl"
  when: inventory_hostname == groups['k8s_hard_jumpbox'][0]

- name: Fetch configs from jumpbox
  fetch: 
    src: /home/{{ ansible_user }}/configs/{{ item }}
    dest: /tmp/{{ item }}
    flat: true
  loop: 
    - "encryption-config.yaml"
    - "kube-controller-manager.kubeconfig"
    - "kube-scheduler.kubeconfig"
  when: inventory_hostname == groups['k8s_hard_jumpbox'][0]

- name: Make sure /etc/kubernetes/config directory exists
  file:
    path: /etc/kubernetes/config
    state: directory
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]


- name: Copy binaries to /usr/local/bin
  copy: 
    src: /tmp/{{ item }}
    dest: /usr/local/bin/{{ item }}
    mode: "0755"
  become: true
  loop:
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
    - "kubectl"
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Make sure /etc/lib/kubernetes directory exists
  file:
    path: /etc/lib/kubernetes
    state: directory
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Move certificates, keys and encryption-config.yaml to API Server /var/lib/kubernetes directory
  copy: 
    src: /tmp/{{ item }}
    dest: /var/lib/kubernetes/{{ item }}
  become: true
  loop:
    - "ca.crt" 
    - "ca.key"
    - "kube-api-server.key" 
    - "kube-api-server.crt"
    - "service-accounts.key"
    - "service-accounts.crt" 
    - "encryption-config.yaml"
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-apiserver.service
  template:
    src: kube-apiserver.service
    dest: /etc/systemd/system/kube-apiserver.service
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-controller-manager.kubeconfig
  copy:
    src: /tmp/kube-controller-manager.kubeconfig
    dest: /var/lib/kubernetes/kube-controller-manager.kubeconfig
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-controller-manager.service
  template:
    src: kube-controller-manager.service
    dest: /etc/systemd/system/kube-controller-manager.service
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-scheduler.kubeconfig
  copy:
    src: /tmp/kube-scheduler.kubeconfig
    dest: /var/lib/kubernetes/kube-scheduler.kubeconfig
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-apiserver.service
  template:
    src: kube-scheduler.yaml
    dest: /etc/kubernetes/config/kube-scheduler.yaml
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-scheduler.service
  template:
    src: kube-scheduler.service
    dest: /etc/systemd/system/kube-scheduler.service
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Daemon-Reload
  shell: systemctl daemon-reload
  become: true
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Enable k8s server services
  systemd: 
    name: "{{ item }}"
    state: started
    enabled: true
  become: true
  loop: 
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
  when: inventory_hostname == groups['k8s_hard_server'][0]

- name: Copy kube-apiserver-to-kubelet.yaml
  template: 
    src: kube-apiserver-to-kubelet.yaml
    dest: /
  become: true

- name: Apply kube-apiserver-to-kubelet.yaml ClusterRole # Fix this
  kubernetes.core.k8s:
    state: present
    src: /kube-apiserver-to-kubelet.yaml
    kubeconfig: /admin.kubeconfig
  become: true

